<?php

namespace AppBundle\Repository;

use Doctrine\ORM\NonUniqueResultException;

/**
 * UserRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * @param $filter
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    function search($filter)
    {
        $qb = $this->createQueryBuilder("u")
            ->orderBy("u.id", "DESC");

        if (!empty($filter["search"])) {
            $qb->andWhere("u.email LIKE :search")
                ->setParameter(":search", "%" . $filter["search"] . "%");
        }

        if (!empty($filter["api-users"])) {
            $qb->andWhere("u.apiAccessToken IS NOT NULL");
        }

        if (!empty($filter["admin"])) {
            $qb->andWhere("u.roles LIKE '%_ADMIN%'");
        }

        if (isset($filter["disabled"]) && $filter["disabled"] === true) {
            $qb->andWhere("u.enabled = 0");
        }
        return $qb;
    }

    /**
     * @param bool $enabledOnly
     *
     * @return mixed
     * @throws NonUniqueResultException
     */
    function getCount($enabledOnly = false)
    {
        $q = $this
            ->createQueryBuilder("u")
            ->select("count(u.id)");

        if ($enabledOnly) {
            $q->where("u.enabled = 1");
        }

        return $q->getQuery()->getSingleScalarResult();
    }


    /**
     * Remove disabled users who have created one month ago
     * @return mixed
     * @throws \Exception
     */
    function removeOldDisbaledUsers()
    {
        return $this->createQueryBuilder("u")
            ->delete()
            ->where("u.enabled = 0")
            ->andWhere("u.created < :date")
            ->setParameter(":date", new \DateTime("-15 day "))
            ->getQuery()
            ->execute();
    }

    /**
     * Reset api call counters for all users having access token
     * @return mixed
     */
    function resetApiCounters()
    {
        return $this->createQueryBuilder("u")
            ->update()
            ->where("u.apiAccessToken IS NOT NULL")
            ->set('u.apiCallNumber', 0)
            ->getQuery()
            ->execute();
    }
}
